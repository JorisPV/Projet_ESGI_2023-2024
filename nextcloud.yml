AWSTemplateFormatVersion: 2010-09-09

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Creation du Cluster
        Parameters:
          - Projet
      - Label:
          default: Configuration NextCloud
        Parameters:
          - NextCloudAdminUser
          - NextCloudAdminPassword
      - Label:
          default: Version NextCloud
        Parameters:
          - NextCloudVersion
      - Label:
          default: Configuration BDD
        Parameters:
          - DBUser
          - DBPassword
          - NextCloudDBName
          - DBMinCapacity
          - DBMaxCapacity
      - Label:
          default: Configuration ECS
        Parameters:
          - EcsTaskCpu
          - EcsTaskMem
          - EcsProvider
          - EcsMinCapacity
          - EcsInitialDesiredCapacity
          - EcsMaxCapacity
          - EcsTargetCpuUtilization
      - Label:
          default: Configuration Elastic Cache
        Parameters:
          - RedisSize
      - Label:
          default: Configuration VPC
        Parameters:
          - Privacy
      - Label:
          default: Configuration DNS
        Parameters:
          - Domain
          - Zone53

Parameters:
  Projet:
    Description: Nom du projet
    Type: String
    Default: nextcloud
  Zone53:
    Description: Zone public Route53
    Type: String
    Default: 'Z01401583U9ULMWYS8JE3'
  Domain:
    Description: Merci de definir un nom de domaine
    Type: String
    Default: '.do-cloud.fr'
  DBUser:
    Description: Utilisateur BDD
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]{6,32}
    Default: nextcloud
  DBPassword:
    Description: Mot de passe BDD
    Type: String
    NoEcho: true
  DBMinCapacity:
    Description: 'Capacite de la DB MIN : 2'
    Type: Number
    MinValue: 2
    MaxValue: 384
    Default: 2
  DBMaxCapacity:
    Description: 'Capacite de la DB MAX : 384'
    Type: Number
    MinValue: 2
    MaxValue: 384
    Default: 8
  NextCloudAdminUser:
    Description: Administrateur NextCloud
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]{5,32}
    Default: admin
  NextCloudAdminPassword:
    Description: Mot de passe Administrateur NextCloud
    Type: String
    NoEcho: true
  NextCloudDBName:
    Description: Nom de la BDD
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]{6,32}
    Default: nextcloud
  NextCloudVersion:
    Description: Version de NextCloud
    Type: String
    Default: 29.0.3
  Privacy:
    Description: Niveau de securite VPC
    Type: String
    Default: Private
    AllowedValues:
      - Private
      - Public
  EcsProvider:
    Description: ECS Provider
    Type: String
    Default: FARGATE
    AllowedValues:
      - FARGATE_SPOT
      - FARGATE
  EcsTaskCpu:
    Description: CPU du conteneur NextCloud
    Type: Number
    Default: 2048
    AllowedValues:
      - 256
      - 512
      - 1024
      - 2048
  EcsTaskMem:
    Description: Memoire du conteneur NextCloud
    Type: Number
    Default: 4096
  EcsMinCapacity:
    Description: Nombre de conteneur NextCloud
    Type: Number
    Default: 1
  EcsInitialDesiredCapacity:
    Description: Nombre minimal de conteneur NextCloud au deploiement
    Type: Number
    Default: 1
  EcsMaxCapacity:
    Description: Nombre maximal de conteneur NextCloud
    Type: Number
    Default: 2
  EcsTargetCpuUtilization:
    Description: Augmenter le nombre de conteneur d√®s X% de l'usage
    Type: Number
    Default: 50
  RedisSize:
    Description: Taille de Redis Elastic Cache
    Type: String
    Default: cache.t3.small
    AllowedValues:
      - cache.t3.micro
      - cache.t3.small
      - cache.t3.medium
      - cache.m5.large
      - cache.m5.xlarge
      - cache.m5.2xlarge
      - cache.m5.4xlarge
      - cache.m5.12xlarge
      - cache.m5.24xlarge
      - cache.r5.large
      - cache.r5.xlarge
      - cache.r5.2xlarge
      - cache.r5.4xlarge
      - cache.r5.12xlarge
      - cache.r5.24xlarge

Mappings:
  Config:
    Container:
      Uid: 33
      Gid: 0
      Permission: '0777'

Conditions:
  CustomDomain: !Not
    - !And
      - !Equals
        - !Ref Domain
        - ''
      - !Equals
        - !Ref Zone53
        - ''
  PrivateSubnets: !Not
    - !Equals
      - !Ref Privacy
      - Public

Resources:
  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://nextcloud-esgi-files.s3.us-east-1.amazonaws.com/vpc.yaml
      TimeoutInMinutes: 60
      Parameters:
        Projet: !Ref Projet
        Privacy: !Ref Privacy

  RDS:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://nextcloud-esgi-files.s3.us-east-1.amazonaws.com/rds.yaml
      TimeoutInMinutes: 60
      Parameters:
        DBUser: !Ref DBUser
        DBPassword: !Ref DBPassword
        DBName: nextcloud
        DBMinCapacity: !Ref DBMinCapacity
        DBMaxCapacity: !Ref DBMaxCapacity
        PrivateSubnets: !GetAtt VPC.Outputs.PrivateSubnets
        VpcId: !GetAtt VPC.Outputs.VPC
        SecurityGroup: !Ref ECSSecurityGroup

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !GetAtt VPC.Outputs.VPC

  ECSSecurityGroupHTTP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ECSSecurityGroup
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      SourceSecurityGroupId: !Ref ElbSecurityGroup

  AWSCloudWatch:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - '-'
        - - !Sub ${Projet}
          - !Ref AWS::StackName
      RetentionInDays: 14

  DATABucket:
    DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  BucketUser:
    Type: AWS::IAM::User
    Properties:
      Policies:
        - PolicyName: s3-access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource: !Sub arn:aws:s3:::${DATABucket}
              - Effect: Allow
                Action:
                  - s3:*
                Resource: !Sub arn:aws:s3:::${DATABucket}/*
              - Effect: Deny
                Action:
                  - s3:DeleteBucket*
                  - s3:PutBucketPolicy
                  - s3:PutEncryptionConfiguration
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                Resource: arn:aws:s3:::*
                
  BucketUserAccess:
    Type: AWS::IAM::AccessKey
    Properties:
      Serial: 1
      Status: Active
      UserName: !Ref BucketUser

  EFS:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      
  EFSTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFS
      SubnetId: !Select
        - 0
        - !Split
          - ','
          - !GetAtt VPC.Outputs.PrivateSubnets
      SecurityGroups:
        - !Ref EFSSecurityGroup
        
  EFSTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFS
      SubnetId: !Select
        - 1
        - !Split
          - ','
          - !GetAtt VPC.Outputs.PrivateSubnets
      SecurityGroups:
        - !Ref EFSSecurityGroup
        
  EFSNextCloud:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref EFS
      RootDirectory:
        Path: !Sub /${Projet}/nextcloud
        CreationInfo:
          OwnerUid: !FindInMap
            - Config
            - Container
            - Uid
          OwnerGid: !FindInMap
            - Config
            - Container
            - Gid
          Permissions: !FindInMap
            - Config
            - Container
            - Permission
            
  EFSConfig:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref EFS
      RootDirectory:
        Path: !Sub /${Projet}/config
        CreationInfo:
          OwnerUid: !FindInMap
            - Config
            - Container
            - Uid
          OwnerGid: !FindInMap
            - Config
            - Container
            - Gid
          Permissions: !FindInMap
            - Config
            - Container
            - Permission
            
  EFSApps:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref EFS
      RootDirectory:
        Path: !Sub /${Projet}/apps
        CreationInfo:
          OwnerUid: !FindInMap
            - Config
            - Container
            - Uid
          OwnerGid: !FindInMap
            - Config
            - Container
            - Gid
          Permissions: !FindInMap
            - Config
            - Container
            - Permission
            
  EFSData:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref EFS
      RootDirectory:
        Path: !Sub /${Projet}/data
        CreationInfo:
          OwnerUid: !FindInMap
            - Config
            - Container
            - Uid
          OwnerGid: !FindInMap
            - Config
            - Container
            - Gid
          Permissions: !FindInMap
            - Config
            - Container
            - Permission
            
  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !GetAtt VPC.Outputs.VPC

  EFSSecurityGroupIN:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EFSSecurityGroup
      IpProtocol: tcp
      FromPort: '2049'
      ToPort: '2049'
      SourceSecurityGroupId: !Ref ECSSecurityGroup

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join
        - ''
        - - !Ref AWS::StackName
          - '-ecs-nextcloud'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      Cpu: !Ref EcsTaskCpu
      Memory: !Ref EcsTaskMem
      ContainerDefinitions:
        - Name: nextcloud
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AWSCloudWatch
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: nextcloud
          Environment:
            - Name: POSTGRES_DB
              Value: !Ref NextCloudDBName
            - Name: POSTGRES_USER
              Value: !Ref DBUser
            - Name: POSTGRES_PASSWORD
              Value: !Ref DBPassword
            - Name: POSTGRES_HOST
              Value: !GetAtt RDS.Outputs.EndpointUrl
            - Name: NEXTCLOUD_TRUSTED_DOMAINS
              Value: !Sub
                - ${Domain} ${ElbDomain}
                - ElbDomain: !GetAtt ElasticLoadBalancer.DNSName
            - Name: NEXTCLOUD_ADMIN_USER
              Value: !Ref NextCloudAdminUser
            - Name: NEXTCLOUD_ADMIN_PASSWORD
              Value: !Ref NextCloudAdminPassword
            - Name: OBJECTSTORE_S3_BUCKET
              Value: !Ref DATABucket
            - Name: OBJECTSTORE_S3_REGION
              Value: !Ref AWS::Region
            - Name: OBJECTSTORE_S3_KEY
              Value: !Ref BucketUserAccess
            - Name: OBJECTSTORE_S3_SECRET
              Value: !GetAtt BucketUserAccess.SecretAccessKey
            - Name: OVERWRITEPROTOCOL
              Value: !If
                - CustomDomain
                - https
                - http
            - Name: REDIS_HOST
              Value: !GetAtt RedisReplicationGroup.PrimaryEndPoint.Address
            - Name: REDIS_PORT
              Value: !GetAtt RedisReplicationGroup.PrimaryEndPoint.Port
            - Name: DEFAULT_LANGUAGE
              Value: fr
            - Name: DEFAULT_LOCALE
              Value: fr_FR
            - Name: DEFAULT_TIMEZONE
              Value: Europe/Paris
          PortMappings:
            - HostPort: 80
              Protocol: tcp
              ContainerPort: 80
          MountPoints:
            - ContainerPath: /var/www/html
              SourceVolume: nextcloud
            - ContainerPath: /var/www/html/custom_apps
              SourceVolume: apps
            - ContainerPath: /var/www/html/config
              SourceVolume: config
            - ContainerPath: /var/www/html/data
              SourceVolume: data
          Image: !Sub nextcloud:${NextCloudVersion}-apache
          Essential: true
      Volumes:
        - Name: nextcloud
          EFSVolumeConfiguration:
            FilesystemId: !Ref EFS
            AuthorizationConfig:
              AccessPointId: !Ref EFSNextCloud
              IAM: ENABLED
            TransitEncryption: ENABLED
        - Name: apps
          EFSVolumeConfiguration:
            FilesystemId: !Ref EFS
            AuthorizationConfig:
              AccessPointId: !Ref EFSApps
              IAM: ENABLED
            TransitEncryption: ENABLED
        - Name: config
          EFSVolumeConfiguration:
            FilesystemId: !Ref EFS
            AuthorizationConfig:
              AccessPointId: !Ref EFSConfig
              IAM: ENABLED
            TransitEncryption: ENABLED
        - Name: data
          EFSVolumeConfiguration:
            FilesystemId: !Ref EFS
            AuthorizationConfig:
              AccessPointId: !Ref EFSData
              IAM: ENABLED
            TransitEncryption: ENABLED
            
  AlbSSL:
    Condition: CustomDomain
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref Domain
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref Domain
          HostedZoneId: !Ref Zone53
          
  ElbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ELB Security Group
      VpcId: !GetAtt VPC.Outputs.VPC

  ELBSecurityGroupHTTPS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ElbSecurityGroup
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: 0.0.0.0/0
      
  ELBSecurityGroupHTTP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ElbSecurityGroup
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 0.0.0.0/0
      
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets: !Split
        - ','
        - !GetAtt VPC.Outputs.PublicSubnets
      SecurityGroups:
        - !Ref ElbSecurityGroup
        
  Route53Alias:
    Condition: CustomDomain
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt ElasticLoadBalancer.DNSName
        EvaluateTargetHealth: true
        HostedZoneId: !GetAtt ElasticLoadBalancer.CanonicalHostedZoneID
      Comment: 'Record - Projet - ${Projet}'
      HostedZoneId: !Ref Zone53
      Name: !Ref Domain
      Type: A

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: !If
        - CustomDomain
        - - Type: redirect
            RedirectConfig:
              Protocol: HTTPS
              Port: 443
              Host: '#{host}'
              Path: /#{path}
              Query: '#{query}'
              StatusCode: HTTP_301
        - - Type: forward
            TargetGroupArn: !Ref LoadBalancerTargetGroup
      LoadBalancerArn: !Ref ElasticLoadBalancer
      Port: '80'
      Protocol: HTTP

  SSLLoadBalancer:
    Condition: CustomDomain
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref AlbSSL
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      LoadBalancerArn: !Ref ElasticLoadBalancer
      Port: '443'
      Protocol: HTTPS

  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: LoadBalancerListener
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1

  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ElasticLoadBalancer
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /status.php
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200,400
      UnhealthyThresholdCount: 2
      VpcId: !GetAtt VPC.Outputs.VPC
      TargetType: ip
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
        - Key: stickiness.enabled
          Value: false

  EcsService:
    DependsOn:
      - LoadBalancerListener
      - EFSTarget1
      - EFSTarget2
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref EcsInitialDesiredCapacity
      CapacityProviderStrategy:
        - Base: 1
          CapacityProvider: !Ref EcsProvider
          Weight: 1
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: !If
            - PrivateSubnets
            - DISABLED
            - ENABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets: !Split
            - ','
            - !If
              - PrivateSubnets
              - !GetAtt VPC.Outputs.PrivateSubnets
              - !GetAtt VPC.Outputs.PublicSubnets
      HealthCheckGracePeriodSeconds: 2400
      LoadBalancers:
        - ContainerName: nextcloud
          ContainerPort: '80'
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      SchedulingStrategy: REPLICA
      TaskDefinition: !Ref ECSTaskDefinition
      PropagateTags: SERVICE

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                  - elasticloadbalancing:DeregisterTargets
                  - elasticloadbalancing:Describe*
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - elasticloadbalancing:RegisterTargets
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:Describe*
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:AttachNetworkInterface
                  - ec2:CreateNetworkInterface
                  - ec2:CreateNetworkInterfacePermission
                  - ec2:DeleteNetworkInterface
                  - ec2:DeleteNetworkInterfacePermission
                  - ec2:Describe*
                  - ec2:DetachNetworkInterface
                Resource: '*'
              - Effect: Allow
                Action:
                  - elasticfilesystem:*
                Resource:
                  - !Sub arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:file-system/${EFS}
                  - !Sub arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:access-point/${EFSNextCloud}
                  - !Sub arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:access-point/${EFSConfig}
                  - !Sub arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:access-point/${EFSApps}
                  - !Sub arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:access-point/${EFSData}

  ECSTaskExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - elasticfilesystem:*
                Resource:
                  - !Sub arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:file-system/${EFS}
                  - !Sub arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:access-point/${EFSNextCloud}
                  - !Sub arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:access-point/${EFSConfig}
                  - !Sub arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:access-point/${EFSApps}
                  - !Sub arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:access-point/${EFSData}
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:*
                Resource: !Sub arn:aws:s3:::${DATABucket}
              - Effect: Allow
                Action:
                  - s3:*
                Resource: !Sub arn:aws:s3:::${DATABucket}/*
              - Effect: Deny
                Action:
                  - s3:DeleteBucket*
                  - s3:PutBucket*
                  - s3:PutEncryptionConfiguration
                  - s3:CreateBucket
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                Resource: arn:aws:s3:::*

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                  - elasticfilesystem:*
                Resource: '*'
                
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role
        
  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Elasticache Security Group
      VpcId: !GetAtt VPC.Outputs.VPC
      
  RedisSecurityGroupIN:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RedisSecurityGroup
      IpProtocol: tcp
      FromPort: '6379'
      ToPort: '6379'
      SourceSecurityGroupId: !Ref ECSSecurityGroup
      
  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Redis Subnet Group
      SubnetIds: !Split
        - ','
        - !GetAtt VPC.Outputs.PrivateSubnets
        
  RedisSettings:
    Type: AWS::ElastiCache::ParameterGroup
    Properties:
      Description: nextcloud group
      CacheParameterGroupFamily: redis6.x
      Properties:
        cluster-enabled: 'no'
        
  RedisReplicationGroup:
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      ReplicationGroupDescription: redis cache nextcloud
      AutomaticFailoverEnabled: false
      NumCacheClusters: 1
      MultiAZEnabled: false
      CacheNodeType: !Ref RedisSize
      CacheParameterGroupName: !Ref RedisSettings
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      Engine: redis
      EngineVersion: 6.x
      PreferredMaintenanceWindow: sat:07:00-sat:08:00
      SecurityGroupIds:
        - !GetAtt RedisSecurityGroup.GroupId
      SnapshotRetentionLimit: 35
      SnapshotWindow: 00:00-03:00
      AtRestEncryptionEnabled: true
    UpdatePolicy:
      UseOnlineResharding: true
      
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole
        
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref EcsMinCapacity
      MaxCapacity: !Ref EcsMaxCapacity
      ResourceId: !Join
        - /
        - - service
          - !Ref ECSCluster
          - !GetAtt EcsService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn
      
  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !GetAtt EcsService.Name
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        TargetValue: !Ref EcsTargetCpuUtilization
        
  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub ${Projet}-nextcloud
      DashboardBody: !Sub |
        {
            "widgets": [
                {
                    "height": 6,
                    "width": 12,
                    "y": 0,
                    "x": 0,
                    "type": "metric",
                    "properties": {
                        "view": "timeSeries",
                        "stacked": false,
                        "metrics": [
                            [ "AWS/ECS", "CPUUtilization", "ServiceName", "${EcsService.Name}", "ClusterName", "${ECSCluster}" ]
                        ],
                        "region": "${AWS::Region}",
                        "title": "ECS-CPU"
                    }
                },
                {
                    "height": 6,
                    "width": 12,
                    "y": 0,
                    "x": 12,
                    "type": "metric",
                    "properties": {
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "${AWS::Region}",
                        "stat": "Average",
                        "period": 300,
                        "metrics": [
                            [ "AWS/ECS", "MemoryUtilization", "ServiceName", "${EcsService.Name}", "ClusterName", "${ECSCluster}" ]
                        ],
                        "title": "ECS-Memory"
                    }
                },
                {
                    "height": 6,
                    "width": 12,
                    "y": 6,
                    "x": 0,
                    "type": "metric",
                    "properties": {
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "${AWS::Region}",
                        "stat": "Average",
                        "period": 300,
                        "metrics": [
                            [ "AWS/RDS", "CPUUtilization", "DBClusterIdentifier", "${RDS.Outputs.DBIdentifier}" ]
                        ],
                        "title": "RDS-CPU"
                    }
                },
                {
                    "height": 6,
                    "width": 12,
                    "y": 6,
                    "x": 12,
                    "type": "metric",
                    "properties": {
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "${AWS::Region}",
                        "stat": "Average",
                        "period": 300,
                        "metrics": [
                            [ "AWS/RDS", "DatabaseConnections", "DBClusterIdentifier", "${RDS.Outputs.DBIdentifier}" ]
                        ],
                        "title": "DatabaseConnections"
                    }
                },
                {
                    "height": 6,
                    "width": 12,
                    "y": 12,
                    "x": 0,
                    "type": "metric",
                    "properties": {
                        "metrics": [
                            [ "AWS/EFS", "StorageBytes", "StorageClass", "Standard", "FileSystemId", "${EFS}" ],
                            [ "...", "IA", ".", "." ],
                            [ "...", "Total", ".", "." ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "${AWS::Region}",
                        "stat": "Average",
                        "period": 300,
                        "title": "EFS"
                    }
                },
                {
                    "height": 6,
                    "width": 12,
                    "y": 12,
                    "x": 12,
                    "type": "metric",
                    "properties": {
                        "metrics": [
                            [ { "expression": "(m2*100)/m1", "label": "Data write", "id": "e2", "region": "${AWS::Region}" } ],
                            [ { "expression": "(m3*100)/m1", "label": "Data read", "id": "e3", "region": "${AWS::Region}" } ],
                            [ { "expression": "(m4*100)/m1", "label": "Metadata", "id": "e4", "region": "${AWS::Region}" } ],
                            [ "AWS/EFS", "TotalIOBytes", "FileSystemId", "${EFS}", { "id": "m1", "visible": false, "region": "${AWS::Region}" } ],
                            [ "AWS/EFS", "DataWriteIOBytes", "FileSystemId", "${EFS}", { "id": "m2", "visible": false, "region": "${AWS::Region}" } ],
                            [ "AWS/EFS", "DataReadIOBytes", "FileSystemId", "${EFS}", { "id": "m3", "visible": false, "region": "${AWS::Region}" } ],
                            [ "AWS/EFS", "MetadataIOBytes", "FileSystemId", "${EFS}", { "id": "m4", "visible": false, "region": "${AWS::Region}" } ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "${AWS::Region}",
                        "stat": "Sum",
                        "period": 60,
                        "title": "EFS-Type"
                    }
                },
                {
                    "height": 6,
                    "width": 12,
                    "y": 18,
                    "x": 0,
                    "type": "metric",
                    "properties": {
                        "view": "timeSeries",
                        "stacked": false,
                        "start": "-P14D",
                        "end": "P0D",
                        "region": "${AWS::Region}",
                        "metrics": [
                            [ "AWS/S3", "BucketSizeBytes", "StorageType", "StandardStorage", "BucketName", "${DATABucket}" ]
                        ],
                        "period": 3600,
                        "stat": "Average",
                        "title": "S3-Data"
                    }
                },
                {
                    "height": 6,
                    "width": 12,
                    "y": 18,
                    "x": 12,
                    "type": "metric",
                    "properties": {
                        "view": "timeSeries",
                        "stacked": false,
                        "start": "-P14D",
                        "end": "P0D",
                        "region": "${AWS::Region}",
                        "metrics": [
                            [ "AWS/S3", "NumberOfObjects", "StorageType", "AllStorageTypes", "BucketName", "${DATABucket}", { "period": 3600 } ]
                        ],
                        "period": 3600,
                        "stat": "Average",
                        "title": "S3-Objets"
                    }
                },
                 {
                     "type": "metric",
                     "x": 0,
                     "y": 24,
                     "width": 12,
                     "height": 6,
                     "properties": {
                         "view": "timeSeries",
                         "stacked": false,
                         "metrics": [
                             [ "AWS/ElastiCache", "CPUUtilization", "CacheClusterId", "${RedisReplicationGroup}-001", "CacheNodeId", "0001" ]
                         ],
                         "region": "${AWS::Region}",
                         "title": "Redis-CPU"
                     }
                 },
                 {
                     "type": "metric",
                     "x": 12,
                     "y": 24,
                     "width": 12,
                     "height": 6,
                     "properties": {
                         "view": "timeSeries",
                         "stacked": false,
                         "metrics": [
                             [ "AWS/ElastiCache", "DatabaseMemoryUsagePercentage", "CacheClusterId", "${RedisReplicationGroup}-001", "CacheNodeId", "0001" ]
                         ],
                         "region": "${AWS::Region}",
                         "title": "Redis-Memory"
                     }
                 }
            ]
        }

Outputs:
  CloudWatchURL:
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${Dashboard}
  LoadBalancerURL:
    Value: !GetAtt ElasticLoadBalancer.DNSName
  Domain:
    Condition: CustomDomain
    Value: !Sub https://${Domain}
